* redis : 오픈 소스이고, 인 메모리이고, 키 값 데이터 구조인 데이터베이스!
  # 장점
    1. 빠른 성능 : 서버의 주 메모리에 상주하기 때문에,
       디스크에 액세스할 필요가 없어져 검색 시간으로 인한 지연을 방지하고,
       CPU 명령을 적게 사용하는 등 좀 더 간단한 알고리즘으로 데이터에 액세스할 수 있음.
    2. 인 메모리 : 거의 모든 유형의 데이터가 redis를 사용해 인 메모리에 저장될 수 있음.
    3. 사용 편의성 : 개발과 운영을 더 쉽고 빠르게 수행할 수 있도록 도구 제공
       - Pub/Sub : 메시지를 채널에 게시하고, 채널에서 구독자에게 전달. 채팅/메시징 시스템에 매우 적합.
       - TTL 키 : 해당 기간 후에 스스로 사라지는 Time To Live 값을 가질 수 있음.
       - 원자성 카운터 : 경합 상태가 일관성 없는 결과를 생성하지 않도록 함.
    4. 복제 밋 지속성 : 비동기식 복제를 지원함.
       -> 주 서버에 장애가 발생할 경우 요청이 여러 서버로 분산될 수 있음.
       안정성을 위해 특정 시점 스냅샷(데이터를 디스크로 복사)와
       데이터가 변경될 때마다 이를 디스크에 저장하는 AOF(Append Only File) 생성 모두 지원

  # 사례
    1. 캐싱 : 다른 DB보다 '앞'에 위치하기 때문에 캐싱에 적합함.
    2. 세션 관리 : 세션 키에 대한 적절한 TTL 값을 설정할 수 있고, 빠른 키 값 스토어로 사용해 쉽게 관리할 수 있음.
    3. 실시간 순위 : Redis Sorted Set 데이터 구조를 사용하면 요소가 목록에 유지되고 점수에 따라 정렬된다.
    4. 속도 제한 : 이벤트 속도를 측정해, 특정 기간 동안 액세스 요청의 수가 한도를 초과하면 조치를 취할 수 있음.
    5. 대기열 : Redis List 데이터 구조를 사용하면 간단한 영구 대기열을 손쉽게 구현할 수 있음.
    6. 채팅/메시징 : PUB/SUB 표준을 지원하기 때문에 고성능 채팅방, 실시간 코멘트 등에 유리함.

+) 또, 채팅 서버처럼 클라이언트의 상태를 공유해야 할 때도 사용하면 좋은데,
   채팅 클라이언트 A와 B가 독립적인 프로세스로 실행된다고 가정할 때, 이 두 프로세스는 서로 변수의 값을 공유하지 못한다.
   예를 들어... 채팅 서버를 구현할 때 로그인 한 사용자들의 정보는 login_ids 객체에 들어가는데,
   이 객체는 각각의 프로세스가 실행될 때마다 해당 프로세스 안에만 존재함!

   > 이럴 때 통신이 가능한 'redis'를 쓰면 좋다.
     어떤 프로그램이 레디스 서버에 연결해 데이터를 넣어 두면 다른 프로그램이 레디스 서버에 연결해 그 데이터를 꺼내온다.
   > 또, 어떤 프로그램이 레디스 서버 쪽에 데이터를 넘기면 다른 프로그램에 데이터를 자동으로 넘기게 만들 수도 있음.

* redis 명령어
  - $ sudo systemctl start redis : systemd 서비스 실행
  - $ sudo systemctl restart redis : 재시작
  - $ sudo systemctl status redis : 상태 체크
  - $ redis-cli : 커맨드 콘솔로 이동!

* node에서의 redis-client 함수
  - hset(key, field, value, print) : key를 기준으로 속성 설정. 기존 속성이 없으면 새로 만들고, 존재하면 덮어씀.
  - hget(key, field, callback) : key를 기준으로 속성을 가져옴. 조회한 속성을 콜백 함수로 전달.

  - subscribe : 하나의 클라이언트가 특정 채널의 값을 받겠다고 등록하는 것.
    > 호출할 때는 채널 이름을 파라미터로 전달한다. (Ex. sub.subscribe('chat'))
    > 이렇게 등록하면, 메시지가 수신되었을 때 message 이벤트가 발생한다.
    > sub 객체의 on 함수를 사용해서 message 이벤트를 처리하면 된다.
    
  - publish : 또 다른 클라이언트가 특정 값을 레디스 서버로 보내면 subscribe로 등록한 클라이언트로 전달하는 것.
