* 패스포트 : 노드에서 사용할 수 있는 사용자 인증 모듈. 패스포트는 순전히 인증 기능만 담당함.
  1) 단순하게 웹 서버의 아이디와 비밀번호만 비교
  2) 페이스북이나 구글 등 소셜 계정을 사용해 인증
  3) 이를 통해 클라이언트가 인증을 요청하면 웹 서버에 있는 패스포트 모듈은 미리 설정한 인증 방식으로 사용자 인증
  4) 사용자 인증에 성공하면 사용자 정보를 세션에 저장
     => 이 세션 정보는 로그인 이후의 요청을 처리할 때 쓰이게 됨

* 스트레티지 : 패스포트에서 지원하는 인증 방식 중 어떤 인증 방식을 쓸 건지 결정하는 것.
  - 로컬 인증 방식 : 데이터베이스에 저장된 사용자 정보와 비교
    검증 콜백 : username, password 파라미터 사용.
      1. 인증 성공 시 : return done(null, user);
      2. 인증 실패 시 : return done(null, false);
      3. 인증 실패 시 (info) : return done(null, false, {message: '메시지 추가'})
      4. 예외 발생 시 : return done(null, user);

  - OAuth 인증 방식 : 페이스북이나 트위터 계정 사용

  # use() 함수로 설정할 수 있음!

* 패스포트 기본 사용법 : router.route('/login').post(passport.authenticate('local', {}));
  - 클라이언트에서 보낸 인증 정보를 인증하려면 passport.authenticate() 메소드를 호출하고 어떤 스트레티지를 사용할지 정해야 함.
    authenticate에 전달된 'login'이 인증 방식을 결정하는 스트레티지의 이름임.
    데이터베이스에 저장된 사용자 아이디와 비밀번호를 비교하는 것이 로컬 스트레티지.
    # 스트레티지는 라우팅 함수에서 사용되기 전에 먼저 설정해야 함!

  - 인증 성공 시 : 콜백 함수가 호출되는데, successRedirect 속성 값을 통해 성공 시 이동할 화면으로 리다이렉트.
  - 인증 실패 시 : 디폴트 값으로 401 Unauthorized 상태가 돌아옴. failureRedirect 속성 값을 통해 성공 시 이동할 화면으로 리다이렉트.

  + 커스텀 콜백 : 사용자 인증 처리에 필요한 기능들을 커스터마이징 하는 것.
    인증에 성공했거나 실패했을 때 어떻게 처리할 것인지 직접 처리 가능!

* 플래시 메시지 : 상태 메시지를 응답 웹 문서 쪽으로 전달할 때 사용.
  - req.flash('loginMessage', '로그인 메시지') : 이렇게 파라미터가 두 개면 플래시 메세지를 설정하는 것.
  - req.flash('loginMessage') : 이렇게 파라미터가 한 개면 플래시 메시지를 조회하는 것.

  + passport.authenticate() 메소드를 호출했을 때 failureFlash 옵션을 줄 수도 있음.
    패스포트로 인증하는 과정에서 오류가 발생했을 때 플래시 메시지로 오류가 전달됨.
    패스포트 모듈이 자동으로 flash() 메소드를 호출하면서 오류 메시지를 설정하는 것!
    > failureFlash : true 이렇게 설정하면 됨.
      failureFlash : '실패했을 때 보여줄 메시지' 이렇게 해도 됨.
      successFlash : '성공했을 때 보여줄 메시지'

* 세션 : 패스포트에서는 로그인 세션을 지원함.
  - 저장 : serializeUser()   메소드 > 사용자 인증을 성공했을 때 사용자 정보를 세션에 저장.
  - 복원 : deserializeUser() 메소드 > 이후 로그인 요청이 들어올 때마다 세션에서 복원한 정보를 사용.

  # 패스포트의 세션을 사용할 때는 그 전에 Express의 세션을 사용하는 코드가 있어야 함!!!!
  # 안 그러면 세션이 유지되지 않음!!!! req.user 객체에 undefined 뜸!!!!
