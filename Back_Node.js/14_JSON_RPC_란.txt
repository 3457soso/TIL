* RPC (Remote Procedure Call) : 서버에 데이터를 요청해 응답 받는 과정을 라이브러리에서 자동으로 처리함.
  - 용어상으로 해석하면... 멀리 떨어져 있는 (Remote) 컴퓨터 상의 프로그램이
    다른 컴퓨터 내에 있는 서브 프로그램을 (Procedure)
    불러내는 것. (Call)

  - 한 프로그램이 네트워크 상의 다른 컴퓨터에 위치하고 있는 프로그램에 서비스를 요청하는 데 사용되는 프로토콜.
  - 서비스를 요청하는 프로그램에서는 해당 네트워크에 대한 상세한 내용을 몰라도 된다.
    > 서비스를 요청하는 프로그램이 [클라이언트], 서비스를 제공하는 프로그램이 [서버]

  - 개발자가 단순히 로컬에서 함수를 호출하는 것처럼 코드를 만들기만 해도
    클라이언트와 서버 간 데이터를 주고 받는 기능이 동작하게 됨.

  - 먼 거리에 있는 서버에 함수를 하나 만들어 두고, 클라이언트에서 호출하거나 응답 받는 과정을 모두
    라이브러리에서 담당한다면...
    클라이언트가 서버와 데이터를 주고 받는 기능은 RPC가 담당한다.

  # RPC와 기존 방식의 가장 큰 차이점은 서버에서 응답을 받는 것이 웹 문서가 아니라 데이터라는 것!!!
  # 웹 문서를 완전히 새로고침하지 않아도 되기 때문에 응답 속도도 빨라진다.
    웹 문서는 로컬에 저장했다가 화면에 보여 주고, 서버로부터는 데이터만 받아서 화면의 일부만 업데이트.
  # 서버 쪽에 핸들러 함수를 등록한 후 클라이언트의 요청 과정만 반복 작업하면 되므로 작업 속도가 빨라짐.

* 스텁 (Stub) : 라이브러리에서 서버로 요청을 보내는 것. 서버에서 처리한 후 결과 값은 응답으로 돌아온다.
  - 이렇게 데이터를 주고 받을 때 쓰이는 데이터 포맷은 XML이나 바이너리 포맷 등등... 이 있는데
  - 여기서는 JSON 포맷을 사용하기 때문에 JSON-RPC라고 부른다.

* 핸들러 (Handler) : JSON-RPC를 사용하기 위해 서버에 등록된 각 함수들.

* JSON-RPC 클라이언트의 메소드들
  - $.jsonRPC.setup() : JSON_RPC 클라이언트의 기본 설정.
    > 들어가야 하는 파라미터...
      1. endPoint  : 접속할 서버의 URL이 들어감.
      2. namespace :

  - $.jsonRPC.request() : 클라이언트에서 서버로 요청!
    서버 쪽에서 만든 함수 이름과 클라이언트에서 보내는 요청 함수 이름이 같아야 함.
    > 들어가야 하는 파라미터...
      1. method 변수
      2. 전달할 데이터가 콜백 함수가 들어 있는 객체 전달
         객체의 속성들...
         1) id      : 요청 ID 지정. 서버로부터 받는 응답을 구별하는 데 사용됨.
         2) params  : 서버로 보낼 데이터를 넣는 배열 객체
         3) success : 응답을 성공적으로 받았을 때 호출되는 콜백 함수
            id      : 요청할 떄 전달한 id 값이 들어감.
            jsonrpc : JSON-RPC 스펙의 버전 표기.
            result  : 응답 데이터가 배열 객체로 들어감.
         4) error   : 오류 응답을 받았을 때 호출되는 콜백 함수

* JSON-RPC를 사용해 핸들러를 실행시키는 순서
  1. 클라이언트에서 [ㅇㅇ]핸들러 함수 호출
  2. jquery-jsonrpc 라이브러리를 통해 jayson 모듈에 요청 전송
  3. 서버에 정의해 놓은 [ㅇㅇ]함수를 통해 결과 값을 얻은 후
  4. 해당 결과 값이 jquery-jsonrpc 라이브러리를 통해 클라이언트로 응답으로 전해짐.
