* 노드에서는 미들웨어를 사용해 필요한 기능을 순차적으로 실행한다고 함.

-> 미들웨어나 라우터는 하나의 독립된 기능을 수행하는 함수라고 생각하면 된다고 함.
-> 요청에 맞게 응답을 돌려줄 때, 필요한 처리를 수행할 수 있도록 독립된 함수로 분리.
-> 분리한 각각의 것들을 '미들웨어'라고 부르자!

* 각각의 미들웨어는 next()를 호출해 다음 미들웨어에게 순서를 넘긴다.

* 라우팅 : 클라이언트가 요청한 path를 보고 이 요청을 처리할 수 있는 곳으로 기능 전달.
  클라이언트의 요청 패스에 따라 함수를 각각 분류.
  라우터에 해당 내용 (path와 함수)를 등록해 두면, 등록해 둔 라우터 정보로 찾은 함수가 호출되어 응답을 해준다!

< 정리하면 >

1. express 모듈을 통해 app 객체 생성
2. app 객체에서 createServer로 서버 실행
3. use() 이용해 미들웨어 등록!

4. 클라이언트에서 서버로 사이트 요청
5. 해당 포트로 들어온 다음 미들웨어로 요청 전송
6. 클라이언트 요청은 등록된 미들웨어를 순서대로 처리하고 통과. 필요한 기능 수행!
   - 여기서 미들웨어가 하나가 아니라면 각각의 미들웨어 안마다 마지막에 next() 메소드를 호출해 다음 미들웨어로 결과를 넘겨줘야 함.

     app.use(function(req, res, next) {
        ...
        req.user = 'soyoung';

        next();
     });

     이런 식으로 써 놓으면 두 번째 미들웨어에서 req.user를 이용해 첫 번째 미들웨어의 데이터에 접근할 수 있음.
7. 서버에서 클라이언트로 응답!
