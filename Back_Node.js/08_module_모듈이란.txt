* 모듈 : 기능별로 코드를 분류한 후 독립된 파일로 분리시켜야 코드를 분석하기 편한데, 이렇게 별도의 파일로 분리하는 것!

* 모듈을 만드는 방법
  1. 자바스크립트 파일을 새로 만든 후, 그 파일 안에서 exports 전역 변수를 사용하는 것.
     - exports 전역 변수는 어디에서나 접근이 가능하도록 정의되어 있고 속성도 추가할 수 있음!
     - 새로운 파일을 만들고 exports 전역 변수에 속성을 추가하면 다른 파일에서도 여기에 접근할 수 있게 됨.
     - 이렇게 만든 모듈을 사용하기 위해선 require() 메소드로 불러들여야 함.

     Ex) exports getUser = function() { return {id : 3457soso }; } 이렇게 선언해두고...
         var user = require('./user1');                            이렇게 불러들인다음에...
         function showUser() { return user.getUser().name; }       이렇게 갖다쓸 수 있다!

     # 노드는 모듈을 처리할 때 exports를 속성으로 인식함.
       이 속성에 함수나 객체를 속성으로 추가해서 모듈을 불러들인 쪽에서 그 속성들을 참조할 수 있게 함.
       그러나! exports에 객체를 할당하면...
         > 모듈 파일 안에서 선언한 exports는 전역 변수가 아닌 단순 변수로 인식되어 버림.
           이 때문에 모듈을 불러들인 쪽에서는 이걸 참조할 수 없게 된다.

  2. module.exports를 사용해 객체 그대로 할당하기.
     - 자바스크립트 프로그래밍을 할 때 객체 안에 속성을 넣어두는 경우가 많기 때문에
     - 모듈화를 할 때 이 객체 자체를 넘기는 게 편할 때가 많다.
     - 하지만 앞에서 언급했듯이 exports에 객체를 할당하면 단순 변수가 되어버리니까 안되는데...

     > 그럴 땐 module.exports를 사용하면 객체를 그대로 할당할 수 있음!

     Ex) var user = { getUser : function() {} ... 객체 내용.. }      먼저 객체를 만들어 놓은 다음에...
         module.exports = user                                      이렇게 객체 자체를 넘겨버림!
         var user = require('./user3');                             이렇게 불러들이면 된다.

     - 객체를 module.exports로 그대로 할당했다는 점과...
     - require() 메소드로 불러들이면 그 객체가 그대로 반환 된다는 점에 주목!

  3. module.exports에는 함수도 할당할 수 있다! (자바스크립트에서는 함수도 객체니까)

     Ex) module.exports = function() { return {id: '3457soso' }; }; 이렇게 함수를 할당한 다음에...
         var user = require('./user4');                             불러오면 user엔 함수가 담기게 됨!

* exports와 module.exports를 동시에 쓰면 module.exports가 우선으로 적용됨!
  - module.exports가 쓰이면 코드 내 exports는 무시된다는 뜻!
  - 실무에서는 module.exports 사용을 권장한다고 함....^^

* 모듈을 분리할 때 쓰이는 코드 패턴 3가지
  1. 함수 할당 : 모듈 안에 함수를 만들어 할당. 모듈을 불러온 후 소괄호를 붙여 모듈을 실행함!
  2. 인스턴스 객체 할당 : 모듈 안에 인스턴스 객체를 만들어 할당. 모듈을 불러온 후 해당 객체의 메소드를 호출하거나 속성 사용 가능.
  3. 프로토타입 객체 할당 : 모듈 안에 프로토타입 객체를 만들어 할당. 모듈을 불러온 후 new 연산자로 인스턴스 객체를 만들어 사용 가능.
     -> 다른 파일에서 필요할 때마다 직접 인스턴스 객체를 만들어 사용할 수 있다는 장점.

< 정리 >
  - 별도의 모듈 파일에서 module.exports에 객체를 할당하면 된다고 이해하면 쉽다.
  - module.exports에 할당한 객체나 exports에 속성으로 추가한 객체는...
    모듈을 불러왔을 때 그래도 사용할 수 있다!
