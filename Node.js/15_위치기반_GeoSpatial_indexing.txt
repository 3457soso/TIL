* 스마트폰이 대중화되면서 위치 기반 서비스가 각광 받고 있음!
  -> 현재 위치 정보를 제공하거나, 현재 위치 기준으로 가까운 무언갈 보여주든가...
  -> 이러기 위해서는 다음 단계를 거쳐야 한다.
     1. ㅇㅇㅇ의 위치 정보를 확인해야 한다. ㅇㅇㅇ의 위치가 경위도 좌표로 되어 있어야 함.
        이는 모바일 단말이나 기타 장비를 사용해 위치를 알아내거나, 조사된 위치 정보를 사용하게 됨.
     2. 커피숍 위치를 서버 데이터베이스에 저장하는 것.
        # 여타 데이터와 다르게 경도, 위도라는 두 가지 데이터를 함께 저장해야 한다.
     3. 그런데 이렇게 저장하게 되면 조회 속도에 영향을 준다.
     4. 따라서 보통은 [공간 인덱싱] 이라는 방법으로 경도, 위도 좌표의 인덱스를 별도로 만든다.
        -> 이런 방법을 몽고디비에서는 GeoSpatial Indexing이라고 부른다.

* 몽고디비의 GeoSpatial Indexing
  - 몽고디비에서 위치 데이터를 조회하는 방법 3가지!
    1) near : 사용자가 있는 곳에서 가장 가까운 ㅇㅇㅇ 찾기
    2) within : 사용자가 보고 있는 지도 범위 안에서 ㅇㅇㅇ을 찾아서 보여 주기
    3) within(circle) : 사용자가 있는 곳에서 반경을 정해 그 이내에 있는 ㅇㅇㅇ을 찾아서 보여 주기

  - 몽고디비에서 위치 데이터를 저장하는 방식 3가지!
    1) Point : 특정 위치나 지점을 나타내는 [점]
    2) LineString : 도로와 같이 이어진 [선]
    3) Polygon : 지역을 나타내는 [면]

  - 2dsphere : 스키마 객체의 index() 메소드를 사용해 인덱스를 만드는데, 위치 좌표는 아래와 같이 지정한다.
    Ex. CoffeeShopSchema.index({geometry : '2dsphere'});

  - 위치와 관련된 정보는 다음과 같이 참조한다
    Ex. 경도 좌표 : result[i]._doc.geometry.coordinates[0];
        위도 좌표 : result[i]._doc.geometry.coordinates[1];

*
  1. near (가까운 ㅇㅇㅇ 조회하기) : geometry 속성의 near() 메소드를 호출하면 된다! 기본 형식은 아래와 같음.
    Ex. find().where(속성 이름).near(조회 조건)
        where() : 조회 대상이 되는 속성 이름을 넣어 준다.
        near() : 조회 조건을 넣어 준다. 예를 들면, 기준점의 위치와 기준점으로부터의 최대 거리를 넣어 준다.

  2. within (사각형 범위 내)
    Ex. find().where(속성 이름).within(조회 조건)
        within() : box 형태로! 사각형 모양으로 알려 주어야 하므로 사각형의 왼쪽 위 좌표와 오른쪽 아래 좌표를 파라미터로 전달.

  3. within (원 반경 내)
    Ex. find().where(속성 이름).within(조회 조건)
        within() : 원 반경을 알려줘야 하므로 center 값과 radius 값을 전달해야 함.
