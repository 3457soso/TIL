* 웹 소켓 : 웹 서버로 소켓을 연결한 후 데이터를 주고 받을 수 있도록 만든 HTML5 표준.
  - 웹 소켓은 HTTP 프로토콜로 소켓 연결을 하기 때문에 웹 브라우저가 이 기능을 지원하지 않으면 쓸 수 없음.

* socket.io 모듈 : 웹 소켓을 지원하지 않는 웹 브라우저에서도 웹 소켓을 사용할 수 있도록 함.

* CORS 모듈 (Cross-Origin Resource Sharing)
  원래 클라이언트에서 Ajax를 사용해 데이터를 가져올 때
  현재 보고 있는 브라우저의 웹 문서를 제공한 웹 서버 이외의 다른 웹 서버에서는 접속할 수 없게 하는 제약이 있었음.
  - 보안 상의 문제 때문에 제약을 만든 것임!
  - 그런데 최근에는 OpenAPI를 이용해서 다른 데서 데이터를 많이 끌어오기 때문에 이 제약이 오히려 독이 됨.
  - 그래서 데이터 제공 요청을 받은 웹 서버가 허용하면 다른 웹 서버로도 접속할 수 있다는 것을 표준으로 만들었음.
  - Access-Control-Allow-Origin 헤더를 포함한 웹 서버가 응답을 보내 주면
    웹 브라우저는 다른 웹 서버로도 데이터를 요청할 수 있다는 의미로 받아들임!

* socket 객체는 클라이언트가 접속하거나 데이터를 전송했을 때 이벤트를 발생 시킴.
  - 이벤트를 처리할 함수를 on() 메소드로 등록하면 이벤트 데이터를 받았을 때 필요한 기능을 실행할 수 있음.
  - connection 이벤트 : 클라이언트가 웹 소켓으로 서버에 연결되었을 때 발생.

* socket.io 모듈은 데이터를 주고 받을 때 [이벤트 처리 방식]을 사용함.
  - 이벤트를 처리할 때와 같은 코드를 사용해 메시지를 주고 받을 수 있다는 의미!
  - on() 메소드로 이벤트 처리 함수를 등록해 전달 받은 데이터를 처리할 수 있게 됨.
  - emit() 메소드 : 데이터를 보낼 때 이벤트를 일으킴. 클라이언트에서 서버로 or 서버에서 클라이언트로 데이터 전송.

  1. io.sockets.emit(event, object)       : 나를 포함한 모든 클라이언트에 전송.
  2. socket.broadcast.emit(event, object) : 나를 제외한 모든 클라이언트에 전송.
     하나의 소켓 객체에 들어 있는 broadcast 객체에는 주체가 되는 socket 객체를 제외한 나머지 객체들을 가리킨다.

* 여기서 message 이벤트를 하나 정의할 것.
  - 이 이벤트를 사용해 보낼 데이터에 들어갈 속성들...
    > sender    : 보내는 사람의 아이디
    > recepient : 받는 사람의 아이디
    > command   : 다른 기능도 수행할 수 있도록 보내는 데이터의 종류 구별
    > type      : 전송될 데이터의 형태 지정
    > data      : 실질적으로 전달될 데이터의 내용
