* 관계형 데이터베이스란? ... RDBMS
  - 데이터 항목들을 모아 놓은 집합 >> 데이터 저장소
  - 정형화된 테이블을 여러 개 포함하고 있으면서 다양한 방법으로 데이터가 접근하거나 조회 가능!
  - 데이터를 조작하거나 접근할 수 있도록 표준 검색 언어인 SQL을 제공됨.
  - SQL 문장은 관계형 데이터베이스의 데이터를 직접 조회하는 데 주로 사용됨.

  - 시스템의 신뢰도를 높이는 데 필요한 장치를 많이 가지고 있음.
  - SQL문을 읽어 들이고 실행하는 데 많은 리소스를 사용함.

  >>>>>>>> 그래서 성능이 떨어지는 경향이 있다.

* 비관계형 데이터베이스란? ... NoSQL (Not Only SQL)
  - 성능을 최우선으로 생각!
  - 실시간으로 처리해야 하는 경우나 대용량 트래픽 감당!

  >>>>>>>> 많은 사용자를 수용하거나 시스템 자원을 적게 소모하는 NoSQL 데이터베이스가 뜨고 있음!

* 몽고디비는 NoSQL이기 때문에 테이블 개념이 없다...
  > 몽고디비에서는 데이터가 모인 하나의 단위를 컬렉션(Collection)이라고 부름!
    테이블과 다르게, 데이터를 정해 놓은 칼럼의 형태대로 컬렉션에 넣어야 한다는 제약은 없다.
    데이터베이스는 컬렉션의 집합이라고 할 수 있으며, 각각의 컬렉션은 여러 개의 '문서 객체'를 가질 수 있다.

  > 따라서 문서 객체는 속성들의 집합으로, 한 사람의 이름이나 나이 등을 저장하고 싶을 때
    하나의 문서 객체를 만든 후, 그 안에 속성을 추가해 저장할 수 있음.
    자바스크립트의 객체와 비슷하다고 생각하면 되는 듯...?

  > 정리하면
    1. 컬렉션 : RDBMS의 테이블과 비슷.
    2. 문서 객체 : 컬렉션 안에 들어 있으며, RDBMS에서의 한 줄의 데이터인 레코드와 비슷.

  - (주의)몽고디비를 사용할 때는 명령 프롬프트에서 몽고디비 DB가 실행되어 있어야 한다.

* 몽고디비 사용하기
  - 몽고디비의 DB 안에는 컬렉션을 만들고, 그 안에 문서도 지정할 수 있다.
  - 그런데 컬렉션은 따로 만들지 않더라도 해당 컬렉션에 필요한 작업을 실행하도록 하면 자동으로 새로 만든다.
    db.users.insert({name: '박소영', age: 20})
    이렇게 해놓으면 자동으로 users 컬렉션을 만들어 추가한다.

  - 추가 : insert()                 [ db.users.insert({name: '박소영', age: 20})      ]
  - 조회 : find()                   [ db.users.find()                                ]
    개행 : pretty()                 [ db.users.find().pretty()                       ]
  - 삭제 : remove()                 [ db.users.remove({name: '박소영'})               ]

* 로보몽고 (몽고디비 GUI 툴)
  - 로보몽고 또한 몽고디비가 실행되어 있지 않으면 연결할 수 없다는 점에 주의해야 함!
  - CMD를 통해 몽고디비를 실행한 후에 연결해야 함.
